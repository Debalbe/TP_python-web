# Classe repr√©sentant une t√¢che
class Tache:
    def __init__(self, description):
        self.description = description  # La description de la t√¢che
        self.statut = "√† faire"         # Le statut initial de la t√¢che

    # M√©thode pour marquer la t√¢che comme termin√©e
    def marquer_terminee(self):
        self.statut = "termin√©e"

    # M√©thode d'affichage de l'objet Tache
    def __str__(self):
        return f"{self.description} [{self.statut}]"


# Classe pour g√©rer une liste de t√¢ches
class GestionnaireTaches:
    def __init__(self):
        self.liste_taches = []  # Liste des objets Tache

    # Ajouter une nouvelle t√¢che √† la liste
    def ajouter_tache(self, description):
        tache = Tache(description)
        self.liste_taches.append(tache)
        print("‚úÖ T√¢che ajout√©e avec succ√®s.")

    # Marquer une t√¢che comme termin√©e √† partir de son index
    def marquer_terminee(self, index):
        if 0 <= index < len(self.liste_taches):
            self.liste_taches[index].marquer_terminee()
            print("‚úÖ T√¢che marqu√©e comme termin√©e.")
        else:
            print("‚ùå Index invalide.")

    # Afficher uniquement les t√¢ches non termin√©es
    def afficher_taches_en_cours(self):
        print("\nüìã T√¢ches en cours :")
        en_cours = [t for t in self.liste_taches if t.statut != "termin√©e"]
        if not en_cours:
            print("Aucune t√¢che en cours.")
        else:
            for i, tache in enumerate(en_cours):
                print(f"{i + 1}. {tache}")

    # Supprimer une t√¢che √† partir de son index
    def supprimer_tache(self, index):
        if 0 <= index < len(self.liste_taches):
            tache = self.liste_taches.pop(index)
            print(f"üóëÔ∏è T√¢che supprim√©e : {tache.description}")
        else:
            print("‚ùå Index invalide.")

    # Afficher toutes les t√¢ches (termin√©es ou non)
    def afficher_toutes_les_taches(self):
        print("\nüìã Toutes les t√¢ches :")
        if not self.liste_taches:
            print("Aucune t√¢che enregistr√©e.")
        else:
            for i, tache in enumerate(self.liste_taches):
                print(f"{i}. {tache}")


# Fonction principale du programme avec menu interactif
def menu():
    gestionnaire = GestionnaireTaches()  # Cr√©ation d'un gestionnaire de t√¢ches

    while True:
        # Affichage du menu principal
        print("\n=== MENU ===")
        print("1. Ajouter une t√¢che")
        print("2. Marquer une t√¢che comme termin√©e")
        print("3. Afficher les t√¢ches en cours")
        print("4. Supprimer une t√¢che")
        print("5. Afficher toutes les t√¢ches")
        print("0. Quitter")

        # Saisie du choix de l'utilisateur
        choix = input("Entrez votre choix : ")

        # Ex√©cution selon le choix de l'utilisateur
        if choix == "1":
            desc = input("Description de la t√¢che : ")
            gestionnaire.ajouter_tache(desc)

        elif choix == "2":
            gestionnaire.afficher_toutes_les_taches()
            idx = int(input("Indice de la t√¢che √† marquer comme termin√©e : "))
            gestionnaire.marquer_terminee(idx)

        elif choix == "3":
            gestionnaire.afficher_taches_en_cours()

        elif choix == "4":
            gestionnaire.afficher_toutes_les_taches()
            idx = int(input("Indice de la t√¢che √† supprimer : "))
            gestionnaire.supprimer_tache(idx)

        elif choix == "5":
            gestionnaire.afficher_toutes_les_taches()

        elif choix == "0":
            print("üëã Au revoir !")
            break

        else:
            print("‚ùå Choix invalide. Essayez encore.")


# Point d'entr√©e du programme
if __name__ == "__main__":
    menu()
